include(GeneralTools)

function(install_language_dependency NAME LANGUAGE)
  if(LANGUAGE STREQUAL "Julia")
    find_yggdrasil_dependency(Julia)
    if(NOT Julia_FOUND)
      message(STATUS "Julia could not be found so dependencies cannot be installed")
      return()
    endif()
    execute_process(
      COMMAND ${Julia_EXECUTABLE} -e "using Pkg; Pkg.add(\"${NAME}\")"
      COMMAND_ERROR_IS_FATAL ANY
    )
    if(NAME STREQUAL CxxWrap)
      execute_process(
        COMMAND ${Julia_EXECUTABLE} -e "using CxxWrap; print(CxxWrap.prefix_path())"
	COMMAND_ERROR_IS_FATAL ANY
	OUTPUT_VARIABLE CxxWrap_PREFIX
      )
      string(STRIP ${CxxWrap_PREFIX} CxxWrap_PREFIX)
      list(APPEND CMAKE_PREFIX_PATH ${CxxWrap_PREFIX})
      set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} PARENT_SCOPE)
    endif()
  else()
    message(FATAL_ERROR "Installation of ${LANGUAGE} dependencies not support (trying to install ${NAME}")
  endif()
endfunction()

function(add_yggdrasil_dependency name)
  include(SearchTools)
  set(oneValueArgs INCLUDE_DIRS_VAR LIBRARY_VAR LIBRARY_DIR_VAR
      DOC_MISSING)
  set(multiValueArgs LIBRARIES LIBRARIES_Python LIBRARY_DIRS INCLUDE_DIRS
      DEFINITIONS DEFINITIONS_MISSING SEARCH_ARGS OPTIONS_MISSING)
  _initialize_find_package(ON ${ARGN})
  if(name MATCHES "Python" AND NOT ARGS_LIBRARIES)
    list(APPEND ARGS_LIBRARIES ${Python_PREFIX}::NumPy)
    list(APPEND ARGS_LIBRARIES_Python ${Python_PREFIX}::Python)
  endif()
  if(ARGS_LIBRARIES OR ARGS_LIBRARIES_Python)
    if(ARGS_REQUIRED_TARGETS)
      message(WARNING "Both REQUIRED_TARGETS and LIBRARIES/LIBRARIES_Python were provided")
    else()
      set(ARGS_REQUIRED_TARGETS ${ARGS_LIBRARIES} ${ARGS_LIBRARIES_Python})
    endif()
  endif()
  if(NOT ${ARGS_FOUND_VAR})
    collect_package_arguments(FIND_ARGS ARGS "${options}")
    find_yggdrasil_dependency(
      ${name} ${FIND_ARGS} ${ARGS_SEARCH_ARGS}
    )
    if(${ARGS_FOUND_VAR})
      message(STATUS "${name} found")
    else()
      message(STATUS "NO ${name}")
    endif()
  endif()
  if(${ARGS_FOUND_VAR})
    if(NOT ARGS_INCLUDE_DIRS_VAR)
      if(${name}_INCLUDE_DIRS)
        set(ARGS_INCLUDE_DIRS_VAR ${name}_INCLUDE_DIRS)
      elseif(${name}_INCLUDE_DIR)
        set(ARGS_INCLUDE_DIRS_VAR ${name}_INCLUDE_DIR)
      endif()
    endif()
    if(NOT ARGS_LIBRARY_VAR)
      if(${name}_LIBRARY_TARGET)
        set(ARGS_LIBRARY_VAR ${name}_LIBRARY_TARGET)
      elseif(${name}_LIBRARY)
        set(ARGS_LIBRARY_VAR ${name}_LIBRARY)
      elseif(${name}_LIBRARIES)
        message(WARNING "No single library for dependency \"${name}\", adding multiple")
        set(ARGS_LIBRARY_VAR ${name}_LIBRARIES)
      endif()
    endif()
    if((NOT ARGS_LIBRARY_DIR_VAR) AND ${name}_LIBRARY_DIR)
      set(ARGS_LIBRARY_DIR_VAR ${name}_LIBRARY_DIR)
    endif()
    list(APPEND YGG_INSTALL_DEPS ${name})
    if(ARGS_DEFINITIONS)
      list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS})
    endif()
    if(ARGS_LIBRARIES)
      list(APPEND DEPS_LIBRARIES ${ARGS_LIBRARIES})
    elseif(${ARGS_LIBRARY_VAR})
      list(APPEND DEPS_LIBRARIES ${${ARGS_LIBRARY_VAR}})
    endif()
    if(ARGS_LIBRARIES_Python)
      list(APPEND DEPS_LIBRARIES_Python ${ARGS_LIBRARIES_Python})
    endif()
    if(ARGS_LIBRARY_DIRS)
      list(APPEND DEPS_LIBRARY_DIRS ${ARGS_LIBRARY_DIRS})
    endif()
    if(${ARGS_LIBRARY_DIR_VAR})
      list(APPEND DEPS_LIBRARY_DIRS ${${ARGS_LIBRARY_DIR_VAR}})
    endif()
    if(ARGS_INCLUDE_DIRS)
      list(APPEND DEPS_INCLUDE_DIRS ${ARGS_INCLUDE_DIRS})
    endif()
    if(ARGS_INCLUDE_DIRS_VAR)
      list(APPEND DEPS_INCLUDE_DIRS ${${ARGS_INCLUDE_DIRS_VAR}})
    endif()
  else()
    if(ARGS_DOC_MISSING)
      message(STATUS "${ARGS_DOC_MISSING}")
    endif()
    if(ARGS_OPTIONS_MISSING)
      set(${ARGS_OPTIONS_MISSING} OFF PARENT_SCOPE)
    endif()
    if(ARGS_DEFINITIONS_MISSING)
      list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS_MISSING})
    endif()
  endif()
  _propagate_cmake_variables_package(
    YGG_INSTALL_DEPS
    YGG_INSTALL_DEFS
    YGG_INSTALL_CONFIG
    DEPS_LIBRARIES
    DEPS_LIBRARIES_Python
    DEPS_LIBRARY_DIRS
    DEPS_INCLUDE_DIRS
  )
endfunction()

function(find_yggdrasil_dependency name)
  include(SearchTools)
  set(options FOR_PACKAGE_CONFIG VERBOSE)
  set(oneValueArgs LANGUAGE LANGUAGE_DEPENDENCY)
  set(multiValueArgs SEARCH_ORDER COMPONENTS)
  _initialize_find_package(ON ${ARGN})
  set(ARGS_GLOBAL ON)
  set_default(ARGS_LANGUAGE_DEPENDENCY ${name})
  if(name STREQUAL "rabbitmq-c")
    set_default(ARGS_SEARCH_ORDER DEFAULT_CONFIG CONDA PKGCONFIG)
  elseif(name STREQUAL "ZeroMQ")
    set_default(ARGS_SEARCH_ORDER DEFAULT_CONFIG CONDA PKGCONFIG)
    if(WIN32)
      set(ARGS_REQUIRED REQUIRED)
    endif()
  elseif(name MATCHES "Python")
    set_default(ARGS_COMPONENTS Interpreter Development NumPy)
    set_default(ARGS_SEARCH_ORDER DEFAULT)
  elseif(ARGS_FOR_PACKAGE_CONFIG)
    set_default(ARGS_SEARCH_ORDER DEFAULT)
  endif()
  collect_package_arguments(
    FIND_ARGS ARGS "${options}"
    SEARCH_ORDER COMPONENTS
  )
  find_package_generic(${name} ${FIND_ARGS})
  if(ARGS_LANGUAGE AND NOT ${ARGS_FOUND_VAR})
    install_language_dependency(
      ${ARGS_LANGUAGE_DEPENDENCY} ${ARGS_LANGUAGE}
    )
    collect_arguments(
      RECURSE_TOKENS ARGS "${options}"
      FOR_PACKAGE_CONFIG
    )
    list(APPEND RECURSE_TOKENS ${FIND_ARGS})
    find_yggdrasil_dependency(${name} ${RECURSE_TOKENS})
  endif()
  _propagate_cmake_variables_package()
  if(ARGS_VERBOSE)
    dump_cmake_variables(PREFIX "${ARGS_VAR_PREFIX}" VERBOSE)
  endif()
endfunction()

function(add_yggdrasil_interface LANGUAGE)
  include(SearchTools)
  set(options DISABLE_BY_DEFAULT LANGUAGE_IS_DEPENDENCY)
  set(oneValueArgs DIRECTORY DEPENDENCY LANGUAGE_DEPENDENCY)
  set(multiValueArgs DEPENDENCY_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(DEFAULT_ENABLED ON)
  if (NOT ARGS_DIRECTORY)
    string(TOLOWER ${LANGUAGE} ARGS_DIRECTORY)
  endif()
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  option(BUILD_${LANGUAGE}_LIBRARY "Build the Yggdrasil ${LANGUAGE} interface library" ${DEFAULT_ENABLED})
  option(YGG_BUILD_${LANGUAGE}_TESTS "Build ${LANGUAGE} tests" OFF)
  option(YGG_${LANGUAGE}_REQUIRED "Require that the ${LANGUAGE} interface is built" OFF)
  if(SKBUILD)
    if(LANGUAGE STREQUAL "Python")
      set(BUILD_${LANGUAGE}_LIBRARY ON)
    elseif(LANGUAGE STREQUAL "CXX" AND YGG_LINK_Python_TO_CXX)
      set(BUILD_${LANGUAGE}_LIBRARY ON)
      if(ALLOW_SKBUILD_NONPython)
        message(FATAL_ERROR "ALLOW_SKBUILD_NONPython is incompatible with YGG_LINK_Python_TO_CXX")
      endif()
    elseif(NOT ALLOW_SKBUILD_NONPython)
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
    set(YGG_BUILD_TESTS OFF)
    set(YGG_BUILD_THIRDPARTY_GTEST OFF)
    if(NOT LANGUAGE STREQUAL "Python")
      set(YGG_BUILD_${LANGUAGE}_TESTS OFF)
    endif()
  endif()
  list(APPEND YGG_LANGUAGES_SUPPORTED ${LANGUAGE})
  if(LANGUAGE STREQUAL "CXX")
    set(BUILD_C_LIBRARY ${BUILD_${LANGUAGE}_LIBRARY} PARENT_SCOPE)
    list(APPEND YGG_LANGUAGES_SUPPORTED C)
  endif()
  if(BUILD_${LANGUAGE}_LIBRARY AND ARGS_LANGUAGE_IS_DEPENDENCY)
    find_yggdrasil_dependency(${LANGUAGE})
    if(NOT ${LANGUAGE}_FOUND)
      message(STATUS "${LANGUAGE} library not found, ${LANGUAGE} interface will not be built")
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
  endif()
  if(ARGS_DEPENDENCY AND BUILD_${LANGUAGE}_LIBRARY)
    find_yggdrasil_dependency(
      ${ARGS_DEPENDENCY} LANGUAGE ${LANGUAGE}
      LANGUAGE_DEPENDENCY ${ARGS_LANGUAGE_DEPENDENCY}
      ADDITIONAL_PROPERTIES ${ARGS_DEPENDENCY_PROPERTIES}
    )
    if(NOT ${ARGS_DEPENDENCY}_FOUND)
      message(STATUS "${LANGUAGE} dependency ${ARGS_DEPENDENCY} not found, ${LANGUAGE} interface will not be built")
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
  endif()
  if(BUILD_${LANGUAGE}_LIBRARY)
    message(STATUS "Building ${LANGUAGE} interface")
    add_subdirectory(${ARGS_DIRECTORY})
    list(APPEND YGG_LANGUAGES_AVAILABLE ${LANGUAGE})
    if(LANGUAGE STREQUAL "CXX")
      list(APPEND YGG_LANGUAGES_AVAILABLE C)
    endif()
  elseif(YGG_${LANGUAGE}_REQUIRED)
    message(FATAL_ERROR "${LANGUAGE} interface cannot be built")
  else()
    message(STATUS "${LANGUAGE} library skipped")
  endif()
  propagate_cmake_variables(
    YGG_LANGUAGES_SUPPORTED YGG_LANGUAGES_AVAILABLE
    YGG_INSTALL_TARGETS YGG_INSTALL_INCLUDES YGG_INSTALL_CONFIG
    BUILD_${LANGUAGE}_LIBRARY YGG_BUILD_${LANGUAGE}_TESTS
    YGG_${LANGUAGE}_REQUIRED YGG_TARGET_${LANGUAGE}
    YGG_BUILD_TESTS YGG_BUILD_THIRDPARTY_GTEST
  )
  if (YGG_Fortran_MOD_DIR)
    set(YGG_Fortran_MOD_DIR "${YGG_Fortran_MOD_DIR}" PARENT_SCOPE)
  endif()
endfunction()

function(add_yggdrasil_option NAME)
  include(SearchTools)
  set(options COMM DISABLE_BY_DEFAULT NO_DEPENDENCY)
  set(oneValueArgs DEPENDENCY DEFAULT FOUND_VAR)
  set(multiValueArgs SUPPORTED_OS LIBRARIES LIBRARIES_Python
      LIBRARY_DIRS INCLUDE_DIRS DEFINITIONS DEFINITIONS_MISSING
      DEPENDENCY_PROPERTIES SEARCH_ARGS)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  check_no_unparsed(ARGS)
  set(ARGS_ADDITIONAL_PROPERTIES ${ARGS_DEPENDENCY_PROPERTIES})
  set(DEFAULT_ENABLED ON)
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  # TODO: Add "YGG_" prefix to these options
  option(ENABLE_${NAME} "Enable ${NAME} support" ${DEFAULT_ENABLED})
  option(REQUIRE_${NAME} "Require ${NAME} support" OFF)
  if(ARGS_COMM)
    list(APPEND ARGS_DEFINITIONS -D${NAME}INSTALLED)
  endif()
  if(ENABLE_${NAME} AND ARGS_SUPPORTED_OS)
    set(ENABLE_${NAME} OFF)
    foreach(item ${ARGS_SUPPORTED_OS})
      if (${item})
        set(ENABLE_${NAME} ON)
      endif()
    endforeach()
    if(NOT ENABLE_${NAME})
      message(STATUS "${NAME} support not available on the current OS")
    endif()
  endif()
  if(NOT ARGS_NO_DEPENDENCY)
    set_default(ARGS_DEPENDENCY ${NAME})
  endif()
  set_default(ARGS_FOUND_VAR ${ARGS_DEPENDENCY}_FOUND)
  if(ENABLE_${NAME})
    if(NOT ARGS_DEPENDENCY)
      if(ARGS_DEFINITIONS)
        list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS})
      endif()
    elseif(NOT ${ARGS_FOUND_VAR})
      collect_arguments(
        FIND_ARGS ARGS "${options}"
        FOUND_VAR LIBRARIES LIBRARIES_Python
        LIBRARY_DIRS INCLUDE_DIRS DEFINITIONS DEFINITIONS_MISSING
        ADDITIONAL_PROPERTIES SEARCH_ARGS
      )
      add_yggdrasil_dependency(
        ${ARGS_DEPENDENCY} ${FIND_ARGS}
        OPTIONS_MISSING ENABLE_${NAME}
        DOC_MISSING "\"${ARGS_DEPENDENCY}\" not found, support for \"${NAME}\" will be disabled"
      )
      propagate_cmake_variables_prefix(
        "${ARGS_DEPENDENCY}" ${ARGS_DEPENDENCY_PROPERTIES}
      )
    endif()
  else()
    message(STATUS "${NAME} support disabled")
    list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS_MISSING})
  endif()
  if(ENABLE_${NAME})
    list(APPEND YGG_OPTIONS_AVAILABLE ${NAME})
    if(ARGS_COMM)
      list(APPEND YGG_COMMS_AVAILABLE ${NAME})
    endif()
  elseif(REQUIRE_${NAME})
    message(WARNING "${NAME} required, but not enabled")
  endif()
  list(APPEND YGG_OPTIONS_SUPPORTED ${NAME})
  if(ARGS_COMM)
    list(APPEND YGG_COMMS_SUPPORTED ${NAME})
  endif()
  if((NOT ENABLE_${NAME}) AND ARGS_COMM AND (NAME STREQUAL "${DEFAULT_COMM}"))
    unset(DEFAULT_COMM CACHE)
  endif()
  propagate_cmake_variables(
    ENABLE_${NAME}
    REQUIRE_${NAME}
    YGG_INSTALL_DEPS
    YGG_INSTALL_DEFS
    YGG_INSTALL_CONFIG
    DEPS_LIBRARIES
    DEPS_LIBRARIES_Python
    DEPS_LIBRARY_DIRS
    DEPS_INCLUDE_DIRS
    YGG_COMMS_AVAILABLE
    YGG_COMMS_SUPPORTED
    YGG_OPTIONS_AVAILABLE
    YGG_OPTIONS_SUPPORTED
  )
endfunction()


function(add_library_dirs_to_rpath TARGET)
  set(oneValueArgs DESTINATION)
  set(multiValueArgs ADDITIONAL_DIRECTORIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  get_target_property(YGG_RPATH ${TARGET} INSTALL_RPATH)
  if (ARGS_DESTINATION)
    if(APPLE)
      list(APPEND YGG_RPATH "@loader_path/${ARGS_DESTINATION}")
    else()
      list(APPEND YGG_RPATH "$ORIGIN/${ARGS_DESTINATION}")
    endif()
  endif()
  if (DEPS_LIBRARY_DIRS)
    list(APPEND YGG_RPATH ${DEPS_LIBRARY_DIRS})
  endif()
  if (ARGS_ADDITIONAL_DIRECTORIES)
    list(APPEND YGG_RPATH ${ARGS_ADDITIONAL_DIRECTORIES})
  endif()
  # foreach(lib ${DEPS_LIBRARIES})
  #   if(EXISTS ${lib})
  #     cmake_path(REMOVE_FILENAME lib OUTPUT_VARIABLE dir)
  #     if (NOT dir IN_LIST YGG_RPATH)
  #       list(APPEND YGG_RPATH ${dir})
  #     endif()
  #   endif()
  # endforeach()
  message(DEBUG "DEPS_LIBRARY_DIRS[${TARGET}] = ${DEPS_LIBRARY_DIRS}")
  message(DEBUG "DEPS_LIBRARIES[${TARGET}] = ${DEPS_LIBRARIES}")
  message(DEBUG "YGG_RPATH[${TARGET}] = ${YGG_RPATH}")
  if (YGG_RPATH)
    if(APPLE)
      set_target_properties(${TARGET} PROPERTIES MACOSX_RPATH 1)
    endif()
    set_target_properties(
      ${TARGET} PROPERTIES
      INSTALL_RPATH "${YGG_RPATH}"
      INSTALL_RPATH_USE_LINK_PATH TRUE)
  endif()
endfunction()


function(set_ygg_test_paths TEST_NAME)
  include(TestTools)
  set(oneValueArgs OUTPUT_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_OUTPUT_PROPERTIES)
    list(APPEND ARGS_UNPARSED_ARGUMENTS OUTPUT_PROPERTIES ${ARGS_OUTPUT_PROPERTIES})
  endif()
  set_tests_runtime_paths(
    ${TEST_NAME}
    ${ARGS_UNPARSED_ARGUMENTS}
    PREPEND
    PATHS ${YGG_TEST_PATHS}
  )
  if(ARGS_OUTPUT_PROPERTIES)
    set(${ARGS_OUTPUT_PROPERTIES} "${${ARGS_OUTPUT_PROPERTIES}}" PARENT_SCOPE)
  endif()
endfunction()


function(set_ygg_test_env TEST_NAME)
  include(TestTools)
  set(oneValueArgs OUTPUT_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_OUTPUT_PROPERTIES)
    list(APPEND ARGS_UNPARSED_ARGUMENTS OUTPUT_PROPERTIES ${ARGS_OUTPUT_PROPERTIES})
  endif()
  set_ygg_test_paths(
    ${TEST_NAME}
    ${ARGS_UNPARSED_ARGUMENTS}
    ADDITIONAL_ENV_VARIABLES ${YGG_TEST_ENV}
  )
  if(ARGS_OUTPUT_PROPERTIES)
    set(${ARGS_OUTPUT_PROPERTIES} "${${ARGS_OUTPUT_PROPERTIES}}" PARENT_SCOPE)
  endif()
endfunction()

function(parse_yggdrasil_cmake_config)
  set(ikey)
  set(ityp)
  set(ides)
  foreach(cfg ${YGG_INSTALL_CONFIG})
    if(ikey AND ityp AND ides)
      set(${ikey} "${cfg}" CACHE ${ityp} "${ides}")
      set(ikey)
      set(ityp)
      set(ides)
    elseif(NOT ikey)
      set(ikey "${cfg}")
    elseif(NOT ityp)
      set(ityp "${cfg}")
    elseif(NOT ides)
      set(ides "${cfg}")
    endif()
  endforeach()
endfunction()

function(add_yggdrasil_cmake_config NAME)
  set(oneValueArgs VALUE TYPE DESCRIPTION)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_VALUE)
    set(${NAME} ${ARGS_VALUE})
  else()
    set(ARGS_VALUE ${${NAME}})
  endif()
  if(NOT ARGS_TYPE)
    set(ARGS_TYPE STRING)
  endif()
  if(NOT ARGS_DESCRIPTION)
    set(ARGS_DESCRIPTION "${NAME}")
  endif()
  set(${NAME} "${${NAME}}" CACHE ${ARGS_TYPE} "${ARGS_DESCRIPTION}")
  list(
    APPEND YGG_INSTALL_CONFIG
    "${NAME}" "${ARGS_TYPE}" "${ARGS_DESCRIPTION}" "${${NAME}}"
  )
  set(YGG_INSTALL_CONFIG "${YGG_INSTALL_CONFIG}" PARENT_SCOPE)
endfunction()

function(check_yggdrasil_option name)
  set(options REQUIRED SUPPORTED)
  set(oneValueArgs TYPE OUTPUT_VAR)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_OUTPUT_VAR)
    set(ARGS_OUTPUT_VAR "${name}_ENABLED")
  endif()
  if(NOT ARGS_TYPE)
    set(ARGS_TYPE OPTION)
  endif()
  if(ARGS_SUPPORTED)
    set(SCOPE SUPPORTED)
  else()
    set(SCOPE AVAILABLE)
  endif()
  set(src "YGG_${ARGS_TYPE}S_${SCOPE}")
  if(ARGS_TYPE STREQUAL "COMM" AND name STREQUAL "DEFAULT" AND src)
    set(IDX 0)
  else()
    list(FIND ${src} "${name}" IDX)
  endif()
  if(IDX EQUAL -1)
    set(output OFF)
  else()
    set(output ON)
  endif()
  if(ARGS_REQUIRED AND NOT output)
    message(FATAL_ERROR "Required Yggdrasil ${ARGS_TYPE} \"${name}\" not ${SCOPE} (${src} = ${${src}})")
  endif()
  set(${ARGS_OUTPUT_VAR} ${output} PARENT_SCOPE)
endfunction()