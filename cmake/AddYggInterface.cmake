function(find_yggdrasil_dependency NAME)
  set(options USING_PKGCONFIG)
  set(multiValueArgs ADDITIONAL_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  include(SearchTools)
  if(NAME STREQUAL "ZeroMQ")
    find_package_zmq()
  elseif(ARGS_USING_PKGCONFIG)
    find_package_pkgconfig(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
    if (${NAME}_CONFIG)
      include(${${NAME}_CONFIG})
      if(NAME STREQUAL "rabbitmq-c")
        set(rabbitmq-c_LIBRARY rabbitmq::rabbitmq)
      endif()
    endif()
  else()
    find_package(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
  endif()
  propagate_cmake_library_variables(${NAME} ${ARGS_ADDITIONAL_PROPERTIES})
endfunction()

function(add_yggdrasil_interface LANGUAGE)
  set(options DISABLE_BY_DEFAULT)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(DEFAULT_ENABLED ON)
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  option(BUILD_${LANGUAGE}_LIBRARY "Build the Yggdrasil ${LANGUAGE} interface library" ${DEFAULT_ENABLED})
  option(YGG_BUILD_${LANGUAGE}_TESTS "Build ${LANGUAGE} tests" OFF)
  foreach(property BUILD_${LANGUAGE}_LIBRARY YGG_BUILD_${LANGUAGE}_TESTS)
    set(${property} ${${property}} PARENT_SCOPE)
  endforeach()
endfunction()

function(add_yggdrasil_option NAME)
  set(options COMM DISABLE_BY_DEFAULT NO_DEPENDENCY)
  set(oneValueArgs DEPENDENCY DEFAULT FOUND_VAR)
  set(multiValueArgs SUPPORTED_OS LIBRARIES INCLUDE_DIRS DEFINITIONS
      DEPENDENCY_PROPERTIES SEARCH_ARGS)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(DEFAULT_ENABLED ON)
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  option(ENABLE_${NAME} "Enable ${NAME} support" ${DEFAULT_ENABLED})
  if(ENABLE_${NAME} AND ARGS_SUPPORTED_OS)
    set(ENABLE_${NAME} OFF)
    foreach(item ${ARGS_SUPPORTED_OS})
      if (${item})
        set(ENABLE_${NAME} ON)
      endif()
    endforeach()
    if(NOT ENABLE_${NAME})
      message(STATUS "${NAME} support not available on the current OS")
    endif()
  endif()
  if((NOT ARGS_DEPENDENCY) AND (NOT ARGS_NO_DEPENDENCY))
    set(ARGS_DEPENDENCY ${NAME})
  endif()
  if(NOT ARGS_FOUND_VAR)
    set(ARGS_FOUND_VAR ${ARGS_DEPENDENCY}_FOUND)
  endif()
  if(ENABLE_${NAME})
    if(ARGS_DEPENDENCY AND NOT ${ARGS_FOUND_VAR})
      find_yggdrasil_dependency(
        ${ARGS_DEPENDENCY}
	ADDITIONAL_PROPERTIES ${ARGS_DEPENDENCY_PROPERTIES}
	${ARGS_SEARCH_ARGS}
      )
      propagate_cmake_library_variables(
        "${ARGS_DEPENDENCY}*" ${ARGS_DEPENDENCY_PROPERTIES}
      )
      if(${ARGS_FOUND_VAR})
        message(STATUS "${ARGS_DEPENDENCY} found")
        list(APPEND YGG_INSTALL_DEPS ${ARGS_DEPENDENCY})
	if(ARGS_DEFINITIONS)
	  list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS})
	endif()
	if(ARGS_LIBRARIES)
	  list(APPEND DEPS_LIBRARIES ${ARGS_LIBRARIES})
	endif()
	if(${ARGS_DEPENDENCY}_LIBRARY)
          list(APPEND DEPS_LIBRARIES ${${ARGS_DEPENDENCY}_LIBRARY})
	endif()
	if(ARGS_INCLUDE_DIRS)
	  list(APPEND DEPS_INCLUDE_DIRS ${ARGS_INCLUDE_DIRS})
	endif()
	if(${ARGS_DEPENDENCY}_INCLUDE_DIR)
          list(APPEND DEPS_INCLUDE_DIRS ${${ARGS_DEPENDENCY}_INCLUDE_DIR})
	endif()
      else()
        message(STATUS "NO ${ARGS_DEPENDENCY}")
	set(ENABLE_${NAME} OFF)
      endif()
    endif()
    if(ENABLE_${NAME} AND ARGS_COMM)
      list(APPEND YGG_INSTALL_DEFS -D${NAME}INSTALLED)
      list(APPEND YGG_AVAILABLE_COMMS ${NAME})
    endif()
  else(ENABLE_${NAME})
    message(STATUS "No ${NAME} support will be available")
  endif(ENABLE_${NAME})
  list(APPEND YGG_SUPPORTED_OPTIONS ${NAME})
  if(ARGS_COMM)
    list(APPEND YGG_SUPPORTED_COMMS ${NAME})
  endif()
  if((NOT ENABLE_${NAME}) AND ARGS_COMM AND (NAME STREQUAL "${DEFAULT_COMM}"))
    unset(DEFAULT_COMM CACHE)
  endif()
  foreach(property ENABLE_${NAME} YGG_INSTALL_DEPS YGG_INSTALL_DEFS DEPS_LIBRARIES DEPS_INCLUDE_DIRS YGG_AVAILABLE_COMMS)
    set(${property} ${${property}} PARENT_SCOPE)
  endforeach()
endfunction()