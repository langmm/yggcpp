function(install_language_dependency NAME LANGUAGE)
  if(LANGUAGE STREQUAL "Julia")
    find_yggdrasil_dependency(Julia)
    if(NOT Julia_FOUND)
      message(STATUS "Julia could not be found so dependencies cannot be installed")
      return()
    endif()
    execute_process(
      COMMAND ${Julia_EXECUTABLE} -e "using Pkg; Pkg.add(\"${NAME}\")"
      COMMAND_ERROR_IS_FATAL ANY
    )
    if(NAME STREQUAL CxxWrap)
      execute_process(
        COMMAND ${Julia_EXECUTABLE} -e "using CxxWrap; print(CxxWrap.prefix_path())"
	COMMAND_ERROR_IS_FATAL ANY
	OUTPUT_VARIABLE CxxWrap_PREFIX
      )
      string(STRIP ${CxxWrap_PREFIX} CxxWrap_PREFIX)
      list(APPEND CMAKE_PREFIX_PATH ${CxxWrap_PREFIX})
      set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} PARENT_SCOPE)
    endif()
  else()
    message(FATAL_ERROR "Installation of ${LANGUAGE} dependencies not support (trying to install ${NAME}")
  endif()
endfunction()

function(find_yggdrasil_dependency NAME)
  include(SearchTools)
  set(options FOR_PACKAGE_CONFIG VERBOSE)
  set(oneValueArgs LANGUAGE LANGUAGE_DEPENDENCY)
  set(multiValueArgs ADDITIONAL_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LANGUAGE_DEPENDENCY)
    set(ARGS_LANGUAGE_DEPENDENCY ${NAME})
  endif()
  if(NAME STREQUAL "rabbitmq-c")
    list(APPEND ARGS_UNPARSED_ARGUMENTS
         HEADER amqp.h LIBNAMES rabbitmq
         SEARCH_ORDER CONDA PKGCONFIG)
  elseif(NAME STREQUAL "ZeroMQ")
    set(APPEND ARGS_UNPARSED_ARGUMENTS
        HEADER zmq.h
        LIBNAMES zmq libzmq libzmq-static
        IMPORTED_TARGET ZeroMQ
        SEARCH_ORDER DEFAULT_CONFIG CONDA PKGCONFIG)
    if(WIN32)
      set(APPEND ARGS_UNPARSED_ARGUMENTS REQUIRED)
    endif()
  endif()
  
  if(NAME STREQUAL "Python3" OR NAME STREQUAL "Python")
    if(ARGS_FOR_PACKAGE_CONFIG)
      set(Python_PREFIX ${NAME})
      list(APPEND ARGS_ADDITIONAL_PROPERTIES Python_PREFIX Python_FOUND)
    endif()
    find_package_python()
  # elseif(NAME STREQUAL "ZeroMQ")
  #   find_package_generic(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
  #   # find_package_zmq()
  # elseif(ARGS_USING_PKGCONFIG)
  #   find_package_pkgconfig(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
  #   if (${NAME}_CONFIG)
  #     include(${${NAME}_CONFIG})
  #     if(NAME STREQUAL "rabbitmq-c" AND (NOT ARGS_FOR_PACKAGE_CONFIG))
  #       set(rabbitmq-c_LIBRARY rabbitmq::rabbitmq)
  #     endif()
  #   endif()
  else()
    find_package_generic(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
    # find_package(${NAME} ${ARGS_UNPARSED_ARGUMENTS})
    if (${NAME}_CONFIG AND NAME STREQUAL "rabbitmq-c" AND (NOT ARGS_FOR_PACKAGE_CONFIG) AND (TARGET rabbitmq::rabbitmq))
      set(rabbitmq-c_LIBRARY rabbitmq::rabbitmq)
    endif()
  endif()
  if(ARGS_LANGUAGE AND NOT ${name}_FOUND)
    install_language_dependency(
      ${ARGS_LANGUAGE_DEPENDENCY} ${ARGS_LANGUAGE}
    )
    if(ARGS_USING_PKGCONFIG)
      list(APPEND RECURSE_TOKENS USING_PKGCONFIG)
    endif()
    if(ARGS_FOR_PACKAGE_CONFIG)
      list(APPEND RECURSE_TOKENS FOR_PACKAGE_CONFIG)
    endif()
    if(ARGS_ADDITIONAL_PROPERTIES)
      list(APPEND RECURSE_TOKENS ADDITIONAL_PROPERTIES ${ARGS_ADDITIONAL_PROPERTIES})
    endif()
    find_yggdrasil_dependency(
      ${NAME} ${RECURSE_TOKENS}
      ${ARGS_UNPARSED_ARGUMENTS}
    )
  endif()
  propagate_cmake_library_variables("^${NAME}*" ${ARGS_ADDITIONAL_PROPERTIES})
  if(ARGS_VERBOSE)
    dump_cmake_variables(REGEX "${NAME}*" VERBOSE)
  endif()
endfunction()

function(add_yggdrasil_interface LANGUAGE)
  include(SearchTools)
  set(options DISABLE_BY_DEFAULT LANGUAGE_IS_DEPENDENCY)
  set(oneValueArgs DIRECTORY DEPENDENCY LANGUAGE_DEPENDENCY)
  set(multiValueArgs DEPENDENCY_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(DEFAULT_ENABLED ON)
  if (NOT ARGS_DIRECTORY)
    string(TOLOWER ${LANGUAGE} ARGS_DIRECTORY)
  endif()
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  option(BUILD_${LANGUAGE}_LIBRARY "Build the Yggdrasil ${LANGUAGE} interface library" ${DEFAULT_ENABLED})
  option(YGG_BUILD_${LANGUAGE}_TESTS "Build ${LANGUAGE} tests" OFF)
  option(YGG_${LANGUAGE}_REQUIRED "Require that the ${LANGUAGE} interface is built" OFF)
  if(SKBUILD)
    if(LANGUAGE STREQUAL "Python")
      set(BUILD_${LANGUAGE}_LIBRARY ON)
    elseif(LANGUAGE STREQUAL "CXX" AND YGG_LINK_Python_TO_CXX)
      set(BUILD_${LANGUAGE}_LIBRARY ON)
      if(ALLOW_SKBUILD_NONPython)
        message(FATAL_ERROR "ALLOW_SKBUILD_NONPython is incompatible with YGG_LINK_Python_TO_CXX")
      endif()
    elseif(NOT ALLOW_SKBUILD_NONPython)
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
    set(YGG_BUILD_TESTS OFF)
    set(YGG_BUILD_THIRDPARTY_GTEST OFF)
    if(NOT LANGUAGE STREQUAL "Python")
      set(YGG_BUILD_${LANGUAGE}_TESTS OFF)
    endif()
  endif()
  if(LANGUAGE STREQUAL "CXX")
    set(BUILD_C_LIBRARY ${BUILD_${LANGUAGE}_LIBRARY} PARENT_SCOPE)
  endif()
  list(APPEND YGG_LANGUAGES_SUPPORTED ${LANGUAGE})
  if(BUILD_${LANGUAGE}_LIBRARY AND ARGS_LANGUAGE_IS_DEPENDENCY)
    find_yggdrasil_dependency(${LANGUAGE})
    if(NOT ${LANGUAGE}_FOUND)
      message(STATUS "${LANGUAGE} library not found, ${LANGUAGE} interface will not be built")
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
  endif()
  if(ARGS_DEPENDENCY AND BUILD_${LANGUAGE}_LIBRARY)
    find_yggdrasil_dependency(
      ${ARGS_DEPENDENCY} LANGUAGE ${LANGUAGE}
      ADDITIONAL_PROPERTIES ${ARGS_DEPENDENCY_PROPERTIES}
      LANGUAGE_DEPENDENCY ${ARGS_LANGUAGE_DEPENDENCY}
    )
    if(NOT ${ARGS_DEPENDENCY}_FOUND)
      message(STATUS "${LANGUAGE} dependency ${ARGS_DEPENDENCY} not found, ${LANGUAGE} interface will not be built")
      set(BUILD_${LANGUAGE}_LIBRARY OFF)
    endif()
  endif()
  if(BUILD_${LANGUAGE}_LIBRARY)
    message(STATUS "Building ${LANGUAGE} interface")
    add_subdirectory(${ARGS_DIRECTORY})
    list(APPEND YGG_LANGUAGES_AVAILABLE ${LANGUAGE})
  elseif(YGG_${LANGUAGE}_REQUIRED)
    message(FATAL_ERROR "${LANGUAGE} interface cannot be built")
  else()
    message(STATUS "${LANGUAGE} library skipped")
  endif()
  propagate_cmake_variables(
    YGG_LANGUAGES_SUPPORTED YGG_LANGUAGES_AVAILABLE
    YGG_INSTALL_TARGETS YGG_INSTALL_INCLUDES YGG_INSTALL_CONFIG
    BUILD_${LANGUAGE}_LIBRARY YGG_BUILD_${LANGUAGE}_TESTS
    YGG_${LANGUAGE}_REQUIRED YGG_TARGET_${LANGUAGE}
    YGG_BUILD_TESTS YGG_BUILD_THIRDPARTY_GTEST
  )
  if (YGG_Fortran_MOD_DIR)
    set(YGG_Fortran_MOD_DIR "${YGG_Fortran_MOD_DIR}" PARENT_SCOPE)
  endif()
endfunction()

function(add_yggdrasil_option NAME)
  include(SearchTools)
  set(options COMM DISABLE_BY_DEFAULT NO_DEPENDENCY)
  set(oneValueArgs DEPENDENCY DEFAULT FOUND_VAR)
  set(multiValueArgs SUPPORTED_OS LIBRARIES LIBRARY_DIRS
      INCLUDE_DIRS DEFINITIONS DEPENDENCY_PROPERTIES SEARCH_ARGS)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(DEFAULT_ENABLED ON)
  if (ARGS_DISABLE_BY_DEFAULT)
    set(DEFAULT_ENABLED OFF)
  endif()
  option(ENABLE_${NAME} "Enable ${NAME} support" ${DEFAULT_ENABLED})
  if(ENABLE_${NAME} AND ARGS_SUPPORTED_OS)
    set(ENABLE_${NAME} OFF)
    foreach(item ${ARGS_SUPPORTED_OS})
      if (${item})
        set(ENABLE_${NAME} ON)
      endif()
    endforeach()
    if(NOT ENABLE_${NAME})
      message(STATUS "${NAME} support not available on the current OS")
    endif()
  endif()
  if((NOT ARGS_DEPENDENCY) AND (NOT ARGS_NO_DEPENDENCY))
    set(ARGS_DEPENDENCY ${NAME})
  endif()
  if(NOT ARGS_FOUND_VAR)
    set(ARGS_FOUND_VAR ${ARGS_DEPENDENCY}_FOUND)
  endif()
  if(ENABLE_${NAME})
    if(ARGS_DEPENDENCY AND NOT ${ARGS_FOUND_VAR})
      find_yggdrasil_dependency(
        ${ARGS_DEPENDENCY}
	ADDITIONAL_PROPERTIES ${ARGS_DEPENDENCY_PROPERTIES}
	${ARGS_SEARCH_ARGS}
      )
      propagate_cmake_library_variables(
        "^${ARGS_DEPENDENCY}*" ${ARGS_DEPENDENCY_PROPERTIES}
      )
      if(${ARGS_FOUND_VAR})
        message(STATUS "${ARGS_DEPENDENCY} found")
        list(APPEND YGG_INSTALL_DEPS ${ARGS_DEPENDENCY})
	if(ARGS_DEFINITIONS)
	  list(APPEND YGG_INSTALL_DEFS ${ARGS_DEFINITIONS})
	endif()
	if(ARGS_LIBRARIES)
	  list(APPEND DEPS_LIBRARIES ${ARGS_LIBRARIES})
	endif()
	if(${ARGS_DEPENDENCY}_LIBRARY)
          list(APPEND DEPS_LIBRARIES ${${ARGS_DEPENDENCY}_LIBRARY})
	  if((NOT ${ARGS_DEPENDENCY}_LIBRARY_DIR) AND
	     (EXISTS ${${ARGS_DEPENDENCY}_LIBRARY}))
	    cmake_path(
	      REMOVE_FILENAME ${ARGS_DEPENDENCY}_LIBRARY
	      OUTPUT_VARIABLE ${ARGS_DEPENDENCY}_LIBRARY_DIR)
	  endif()
	endif()
	if(ARGS_LIBRARY_DIRS)
	  list(APPEND DEPS_LIBRARY_DIRS ${ARGS_LIBRARY_DIRS})
	endif()
	if(${ARGS_DEPENDENCY}_LIBRARY_DIR)
	  list(APPEND DEPS_LIBRARY_DIRS ${${ARGS_DEPENDENCY}_LIBRARY_DIR})
	endif()
	if(ARGS_INCLUDE_DIRS)
	  list(APPEND DEPS_INCLUDE_DIRS ${ARGS_INCLUDE_DIRS})
	endif()
	if(${ARGS_DEPENDENCY}_INCLUDE_DIR)
          list(APPEND DEPS_INCLUDE_DIRS ${${ARGS_DEPENDENCY}_INCLUDE_DIR})
	endif()
      else()
        message(STATUS "NO ${ARGS_DEPENDENCY}")
	set(ENABLE_${NAME} OFF)
      endif()
    endif()
    if(ENABLE_${NAME} AND ARGS_COMM)
      list(APPEND YGG_INSTALL_DEFS -D${NAME}INSTALLED)
      list(APPEND YGG_COMMS_AVAILABLE ${NAME})
    endif()
  else(ENABLE_${NAME})
    message(STATUS "No ${NAME} support will be available")
  endif(ENABLE_${NAME})
  list(APPEND YGG_OPTIONS_SUPPORTED ${NAME})
  if(ARGS_COMM)
    list(APPEND YGG_COMMS_SUPPORTED ${NAME})
  endif()
  if((NOT ENABLE_${NAME}) AND ARGS_COMM AND (NAME STREQUAL "${DEFAULT_COMM}"))
    unset(DEFAULT_COMM CACHE)
  endif()
  propagate_cmake_variables(
    ENABLE_${NAME} YGG_INSTALL_DEPS YGG_INSTALL_DEFS YGG_INSTALL_CONFIG
    DEPS_LIBRARIES DEPS_LIBRARY_DIRS DEPS_INCLUDE_DIRS YGG_COMMS_AVAILABLE
  )
endfunction()


function(add_library_dirs_to_rpath TARGET)
  set(oneValueArgs DESTINATION)
  set(multiValueArgs ADDITIONAL_DIRECTORIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  get_target_property(YGG_RPATH ${TARGET} INSTALL_RPATH)
  if (ARGS_DESTINATION)
    if(APPLE)
      list(APPEND YGG_RPATH "@loader_path/${ARGS_DESTINATION}")
    else()
      list(APPEND YGG_RPATH "$ORIGIN/${ARGS_DESTINATION}")
    endif()
  endif()
  if (DEPS_LIBRARY_DIRS)
    list(APPEND YGG_RPATH ${DEPS_LIBRARY_DIRS})
  endif()
  if (ARGS_ADDITIONAL_DIRECTORIES)
    list(APPEND YGG_RPATH ${ARGS_ADDITIONAL_DIRECTORIES})
  endif()
  # foreach(lib ${DEPS_LIBRARIES})
  #   if(EXISTS ${lib})
  #     cmake_path(REMOVE_FILENAME lib OUTPUT_VARIABLE dir)
  #     if (NOT dir IN_LIST YGG_RPATH)
  #       list(APPEND YGG_RPATH ${dir})
  #     endif()
  #   endif()
  # endforeach()
  message(DEBUG "DEPS_LIBRARY_DIRS[${TARGET}] = ${DEPS_LIBRARY_DIRS}")
  message(DEBUG "DEPS_LIBRARIES[${TARGET}] = ${DEPS_LIBRARIES}")
  message(DEBUG "YGG_RPATH[${TARGET}] = ${YGG_RPATH}")
  if (YGG_RPATH)
    if(APPLE)
      set_target_properties(${TARGET} PROPERTIES MACOSX_RPATH 1)
    endif()
    set_target_properties(
      ${TARGET} PROPERTIES
      INSTALL_RPATH "${YGG_RPATH}"
      INSTALL_RPATH_USE_LINK_PATH TRUE)
  endif()
endfunction()


function(set_ygg_test_paths TEST_NAME)
  include(TestTools)
  set(oneValueArgs OUTPUT_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_OUTPUT_PROPERTIES)
    list(APPEND ARGS_UNPARSED_ARGUMENTS OUTPUT_PROPERTIES ${ARGS_OUTPUT_PROPERTIES})
  endif()
  set_tests_runtime_paths(
    ${TEST_NAME}
    ${ARGS_UNPARSED_ARGUMENTS}
    PREPEND
    PATHS ${YGG_TEST_PATHS}
  )
  if(ARGS_OUTPUT_PROPERTIES)
    set(${ARGS_OUTPUT_PROPERTIES} "${${ARGS_OUTPUT_PROPERTIES}}" PARENT_SCOPE)
  endif()
endfunction()


function(set_ygg_test_env TEST_NAME)
  include(TestTools)
  set(oneValueArgs OUTPUT_PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_OUTPUT_PROPERTIES)
    list(APPEND ARGS_UNPARSED_ARGUMENTS OUTPUT_PROPERTIES ${ARGS_OUTPUT_PROPERTIES})
  endif()
  set_ygg_test_paths(
    ${TEST_NAME}
    ${ARGS_UNPARSED_ARGUMENTS}
    ADDITIONAL_ENV_VARIABLES ${YGG_TEST_ENV}
  )
  if(ARGS_OUTPUT_PROPERTIES)
    set(${ARGS_OUTPUT_PROPERTIES} "${${ARGS_OUTPUT_PROPERTIES}}" PARENT_SCOPE)
  endif()
endfunction()

function(parse_yggdrasil_cmake_config)
  set(ikey)
  set(ityp)
  set(ides)
  foreach(cfg ${YGG_INSTALL_CONFIG})
    if(ikey AND ityp AND ides)
      set(${ikey} "${cfg}" CACHE ${ityp} "${ides}")
      set(ikey)
      set(ityp)
      set(ides)
    elseif(NOT ikey)
      set(ikey "${cfg}")
    elseif(NOT ityp)
      set(ityp "${cfg}")
    elseif(NOT ides)
      set(ides "${cfg}")
    endif()
  endforeach()
endfunction()

function(add_yggdrasil_cmake_config NAME)
  set(oneValueArgs VALUE TYPE DESCRIPTION)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_VALUE)
    set(${NAME} ${ARGS_VALUE})
  else()
    set(ARGS_VALUE ${${NAME}})
  endif()
  if(NOT ARGS_TYPE)
    set(ARGS_TYPE STRING)
  endif()
  if(NOT ARGS_DESCRIPTION)
    set(ARGS_DESCRIPTION "${NAME}")
  endif()
  set(${NAME} "${${NAME}}" CACHE ${ARGS_TYPE} "${ARGS_DESCRIPTION}")
  list(
    APPEND YGG_INSTALL_CONFIG
    "${NAME}" "${ARGS_TYPE}" "${ARGS_DESCRIPTION}" "${${NAME}}"
  )
  set(YGG_INSTALL_CONFIG "${YGG_INSTALL_CONFIG}" PARENT_SCOPE)
endfunction()
