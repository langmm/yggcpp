cmake_minimum_required(VERSION @CMAKE_MINIMUM_REQUIRED_VERSION@)
list(APPEND CMAKE_MODULE_PATH "@CMAKE_CURRENT_FUNCTION_LIST_DIR@")
include(GeneralTools)
show_build_info(PREFIX "EXTERNAL @target@: ")
project(@target@_PROJECT LANGUAGES @ARGS_LANGUAGE@ @ARGS_LINKER_LANGUAGE@)
show_build_info(PREFIX "EXTERNAL @target@: ")
set(INTERNAL_BUILD_DIR "@CMAKE_CURRENT_BINARY_DIR@")
set(INTERNAL_SOURCE_DIR "@CMAKE_CURRENT_SOURCE_DIR@")
set(target @target@)
set(library_type @library_type@)
set(final_library_type @final_library_type@)
set(internal_target_file "@internal_target_file@")
set(external_target_file "@external_target_file@")
set(external_def_file "@external_def_file@")

include(BuildTools)
add_internal_library(
  ${target} ${final_library_type}
  LANGUAGE @ARGS_LANGUAGE@
  LINKER_LANGUAGE @ARGS_LINKER_LANGUAGE@
  SOURCES @EXTERNAL_SOURCES@
  LIBRARIES @ARGS_LIBRARIES@
  INCLUDES @ARGS_INCLUDES@
  DEFINITIONS @ARGS_DEFINITIONS@
  COMPILE_FLAGS @ARGS_COMPILE_FLAGS@
  PROPERTIES @ARGS_PROPERTIES@
  TARGETS_FILE ${internal_target_file}
)

# Create a list of libraries implicitly linked by the compiler
if(external_target_file)
  include(AddTargetsFromFile)
  # TODO: Find stdc++ library for fortran?
  set(generate_args)
  if (MSVC_AND_GNU_BUILD)
    set(generate_args FULL_LIBRARIES) # CREATE_LIB)
  endif()
  generate_implicit_libraries_file(
    @ARGS_LANGUAGE@ ${external_target_file} ${generate_args}
  )
endif()

inspect_target(${target} PREFIX "EXTERNAL ${target}: ")

if(library_type STREQUAL "OBJECT")
  # Ensure that the object files are in the build directory
  copy_target_files(
    ${target} "${CMAKE_CURRENT_BINARY_DIR}"
    COMPONENTS OBJECTS
  )

  # Create .def file for objects
  if(WIN32)
    include(CreateMSVCLib)
    target2def(${target})
  endif()
endif()
