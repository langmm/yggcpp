# https://stackoverflow.com/questions/32183975/how-to-print-all-the-properties-of-a-target-in-cmake
# Get all propreties that cmake supports
if(NOT CMAKE_PROPERTY_LIST)
  execute_process(COMMAND cmake --help-property-list OUTPUT_VARIABLE CMAKE_PROPERTY_LIST)

  # Convert command output into a CMake list
  string(REGEX REPLACE ";" "\\\\;" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
  string(REGEX REPLACE "\n" ";" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
  list(REMOVE_DUPLICATES CMAKE_PROPERTY_LIST)
endif()

function(dump_cmake_variables)
  set(options VERBOSE)
  set(oneValueArgs REGEX PREFIX OUTPUT_VAR LOG_LEVEL)
  set(multiValueArgs VARIABLES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LOG_LEVEL)
    set(ARGS_LOG_LEVEL STATUS)
  endif()
  if(ARGS_VARIABLES)
    set(_variableNames ${ARGS_VARIABLES})
  else()
    get_cmake_property(_variableNames VARIABLES)
  endif()
  list (SORT _variableNames)
  if(NOT ARGS_OUTPUT_VAR)
    set(ARGS_VERBOSE ON)
  endif()
  if(ARGS_VERBOSE)
    set(ARGS_LOG_LEVEL STATUS)
  endif()
  if(ARGS_PREFIX)
    if(ARGS_REGEX)
      message(FATAL_ERROR "Both PREFIX and REGEX provided")
    endif()
    set(ARGS_REGEX "^${ARGS_PREFIX}*")
  endif()
  if (ARGS_VERBOSE)
    message(${ARGS_LOG_LEVEL} "Variables matching \"${ARGS_REGEX}\":")
  endif()
  foreach (_variableName ${_variableNames})
    if (ARGS_REGEX)
      unset(MATCHED)
      string(REGEX MATCH ${ARGS_REGEX} MATCHED ${_variableName})
      if (NOT MATCHED)
        continue()
      endif()
    endif()
    if (ARGS_VERBOSE)
      message(${ARGS_LOG_LEVEL} "    ${_variableName}=${${_variableName}}")
    endif()
    if (ARGS_OUTPUT_VAR)
      list(APPEND ${ARGS_OUTPUT_VAR} ${_variableName})
    endif()
  endforeach()
  if (ARGS_OUTPUT_VAR)
    set(${ARGS_OUTPUT_VAR} ${${ARGS_OUTPUT_VAR}} PARENT_SCOPE)
  endif()
endfunction()

macro(propagate_cmake_variables)
  set(_temp_package_vars "${ARGN}")
  foreach (_variableName IN LISTS _temp_package_vars)
    set(${_variableName} ${${_variableName}} PARENT_SCOPE)
  endforeach()
endmacro()

macro(propagate_cmake_variables_regex NAME)
  set(_temp_package_vars "${ARGN}")
  dump_cmake_variables(
    REGEX ${NAME} OUTPUT_VAR _temp_package_vars
  )
  foreach (_variableName IN LISTS _temp_package_vars)
    set(${_variableName} ${${_variableName}} PARENT_SCOPE)
  endforeach()
endmacro()

macro(propagate_cmake_variables_prefix NAME)
  set(_temp_package_vars "${ARGN}")
  dump_cmake_variables(
    REGEX "^${NAME}*" OUTPUT_VAR _temp_package_vars
  )
  foreach (_variableName IN LISTS _temp_package_vars)
    set(${_variableName} ${${_variableName}} PARENT_SCOPE)
  endforeach()
endmacro()

function(copy_cmake_variables src_prefix dst_prefix)
  dump_cmake_variables(REGEX "^${src_prefix}" OUTPUT_VAR SRC_VARS)
  foreach(srcvar IN LISTS SRC_VARS)
    string(REPLACE "${src_prefix}" "${dst_prefix}" dstvar "${srcvar}")
    set(${dstvar} "${${srcvar}}")
  endforeach()
  propagate_cmake_variables_prefix(dst_prefix)
endfunction()

function(set_default var)
  if(NOT ${var})
    set(${var} "${ARGN}" PARENT_SCOPE)
  endif()
endfunction()

function(cmake_parse_arguments_group PREFIX options oneValueArgs multiValueArgs groupArgs)
  cmake_parse_arguments(${PREFIX} "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  foreach(iarg IN LISTS options)
    if(${PREFIX}_${iarg})
      set(${PREFIX}_${iarg} "${iarg}")
    else()
      set(${PREFIX}_${iarg})
    endif()
  endforeach()
  set(${PREFIX}_GROUPED_ARGUMENTS)
  foreach(iarg IN LISTS groupArgs)
    if(${PREFIX}_${iarg})
      list(FIND options "${iarg}" iarg_IDX)
      if(iarg_IDX EQUAL -1)
        list(APPEND ${PREFIX}_GROUPED_ARGUMENTS ${iarg} ${${PREFIX}_${iarg}})
      else()
        list(APPEND ${PREFIX}_GROUPED_ARGUMENTS ${iarg})
      endif()
    endif()
  endforeach()
  propagate_cmake_variables_prefix("${PREFIX}")
endfunction()

function(set_options_to_names PREFIX options)
  foreach(iarg IN LISTS options)
    if(${PREFIX}_${iarg})
      set(${PREFIX}_${iarg} "${iarg}" PARENT_SCOPE)
    else()
      set(${PREFIX}_${iarg} "" PARENT_SCOPE)
    endif()
  endforeach()
endfunction()

function(collect_arguments VAR PREFIX options)
  set(out)
  foreach(iarg IN LISTS ARGN)
    if(${PREFIX}_${iarg})
      list(FIND options "${iarg}" iarg_IDX)
      if(iarg_IDX EQUAL -1)
        list(APPEND out ${iarg} ${${PREFIX}_${iarg}})
      else()
        list(APPEND out ${iarg})
      endif()
    endif()
  endforeach()
  set(${VAR} "${out}" PARENT_SCOPE)
endfunction()

function(check_no_unparsed PREFIX)
  if(${PREFIX}_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "Unparsed arguments: ${${PREFIX}_UNPARSED_ARGUMENTS}")
  endif()
endfunction()

function(list_append_with_prefix VAR PREFIX)
  foreach(ivar IN LISTS ARGN)
    list(APPEND ${VAR} ${PREFIX}${ivar})
  endforeach()
  set(${VAR} "${${VAR}}" PARENT_SCOPE)
endfunction()

function(list_intersection VAR)
  list(GET ARGN 0 first)
  list(SUBLIST ARGN 1 -1 OTHER_LISTS)
  set(out)
  foreach(ivar IN LISTS ${first})
    foreach(other IN LISTS OTHER_LISTS)
      list(FIND ${other} ${ivar} other_IDX)
      if(other_IDX EQUAL -1)
        break()
      endif()
    endforeach()
    if(NOT other_IDX EQUAL -1)
      list(APPEND out ${ivar})
    endif()
  endforeach()
  set(${VAR} "${out}" PARENT_SCOPE)
endfunction()

function(escape_quotes VAR)
  set(oneValueArgs OUTPUT_VAR)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_OUTPUT_VAR)
    set(ARGS_OUTPUT_VAR ${VAR})
  endif()
  
  set(${ARGS_OUTPUT_VAR} ${${VAR}} PARENT_SCOPE)
endfunction()

function(restore_spaces VAR)
  set(oneValueArgs OUTPUT_VAR)
  cmake_parse_arguments(_ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT _ARGS_OUTPUT_VAR)
    set(_ARGS_OUTPUT_VAR ${VAR})
  endif()
  message(STATUS "restore_spaces: BEFORE ${VAR} = ${${VAR}}")
  set(PLACEHOLDER "~SPACE~")
  string(REPLACE "${PLACEHOLDER}" " " out "${${VAR}}")
  message(STATUS "restore_spaces: AFTER  ${_ARGS_OUTPUT_VAR} = ${out}")
  set(${_ARGS_OUTPUT_VAR} ${out} PARENT_SCOPE)
endfunction()

function(protect_spaces VAR)
  set(oneValueArgs OUTPUT_VAR)
  cmake_parse_arguments(_ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT _ARGS_OUTPUT_VAR)
    set(_ARGS_OUTPUT_VAR ${VAR})
  endif()
  message(STATUS "protect_spaces: BEFORE ${VAR} = ${${VAR}}")
  set(PLACEHOLDER "~SPACE~")
  string(REPLACE " " "${PLACEHOLDER}" out "${${VAR}}")
  message(STATUS "protect_spaces: AFTER  ${_ARGS_OUTPUT_VAR} = ${out}")
  set(${_ARGS_OUTPUT_VAR} ${out} PARENT_SCOPE)
endfunction()

function(get_path_sep VAR)
  if(WIN32)
    set(${VAR} "\;" PARENT_SCOPE)
  else()
    set(${VAR} "\:" PARENT_SCOPE)
  endif()
endfunction()

function(extension2language EXT VAR)
  if(EXT STREQUAL ".c")
    set(${VAR} C PARENT_SCOPE)
  elseif(EXT STREQUAL ".cpp")
    set(${VAR} CXX PARENT_SCOPE)
  elseif(EXT STREQUAL ".jl")
    set(${VAR} Julia PARENT_SCOPE)
  elseif(EXT STREQUAL ".py")
    set(${VAR} Python PARENT_SCOPE)
  elseif(EXT STREQUAL ".R")
    set(${VAR} R PARENT_SCOPE)
  elseif(EXT STREQUAL ".m")
    set(${VAR} Matlab PARENT_SCOPE)
  else()
    string(REGEX MATCH "[.][fF]((90)|(95)|(03)|(08)|(18))?$" match ${EXT})
    if(match)
      set(${VAR} Fortran PARENT_SCOPE)
    else()
      message(ERROR "Support for extension \"${EXT}\" not implemented")
    endif()
  endif()
endfunction()

function(language2compilerenv language VAR)
  if(language STREQUAL C)
    set(${VAR} "CC" PARENT_SCOPE)
  elseif(language STREQUAL CXX)
    set(${VAR} "CXX" PARENT_SCOPE)
  elseif(language STREQUAL Fortran)
    set(${VAR} "FC" PARENT_SCOPE)
  else()
    message(ERROR "Support for language \"${language}\" not implemented")
  endif()
endfunction()

function(language2srcext language VAR)
  if(language STREQUAL C)
    set(${VAR} ".c" PARENT_SCOPE)
  elseif(language STREQUAL CXX)
    set(${VAR} ".cpp" PARENT_SCOPE)
  elseif(language STREQUAL Fortran)
    set(${VAR} ".F90" PARENT_SCOPE)
  elseif(language STREQUAL Julia)
    set(${VAR} ".jl" PARENT_SCOPE)
  elseif(language STREQUAL Python)
    set(${VAR} ".py" PARENT_SCOPE)
  elseif(language STREQUAL R)
    set(${VAR} ".R" PARENT_SCOPE)
  elseif(language STREQUAL Matlab)
    set(${VAR} ".m" PARENT_SCOPE)
  else()
    message(ERROR "Support for language \"${language}\" not implemented")
  endif()
endfunction()

function(file2language TARGET VAR)
  cmake_path(GET TARGET EXTENSION TARGET_EXT)
  extension2language(${TARGET_EXT} ${VAR})
  set(${VAR} ${${VAR}} PARENT_SCOPE)
endfunction()

function(get_supported_generators VAR)
  set(output "${CMAKE_GENERATOR}")
  execute_process(
    COMMAND python ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/scripts/check_generators.py
    OUTPUT_VARIABLE RAW_OUTPUT
    COMMAND_ERROR_IS_FATAL ANY
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  foreach(iout IN LISTS RAW_OUTPUT)
    if(NOT iout STREQUAL "${CMAKE_GENERATOR}")
      list(APPEND output ${iout})
    endif()
  endforeach()
  set(${VAR} ${output} PARENT_SCOPE)
endfunction()

function(get_supported_languages VAR)
  set(options COMPILED)
  set(multiValueArgs EXCLUDE)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_COMPILED)
    set(out C CXX Fortran)
  else()
    set(out C CXX Fortran Julia Python R Matlab)
  endif()
  if(ARGS_EXCLUDE)
    foreach(ilanguage IN LISTS out)
      list(FIND ARGS_EXCLUDE "${ilanguage}" ilanguage_IDX)
      if(ilanguage_IDX EQUAL -1)
        list(APPEND ${VAR} ${ilanguage})
      endif()
    endforeach()
  else()
    list(APPEND ${VAR} ${out})
  endif()
  set(${VAR} ${${VAR}} PARENT_SCOPE)
endfunction()

function(show_build_info)
  set(oneValueArgs PREFIX LOG_LEVEL)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LOG_LEVEL)
    set(ARGS_LOG_LEVEL DEBUG)
  endif()
  list(APPEND ARGS_UNPARSED_ARGUMENTS LOG_LEVEL ${ARGS_LOG_LEVEL})
  if(ARGS_PREFIX)
    list(APPEND ARGS_UNPARSED_ARGUMENTS PREFIX ${ARGS_PREFIX})
  endif()
  message(${ARGS_LOG_LEVEL} "${ARGS_PREFIX}CMAKE_GENERATOR = ${CMAKE_GENERATOR}")
  show_compiler_env_vars(${ARGS_UNPARSED_ARGUMENTS})
  show_compilers(${ARGS_UNPARSED_ARGUMENTS})
  show_implicit_libraries(${ARGS_UNPARSED_ARGUMENTS})
endfunction()

function(show_compiler_env_vars)
  set(oneValueArgs PREFIX LOG_LEVEL)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LOG_LEVEL)
    set(ARGS_LOG_LEVEL DEBUG)
  endif()
  get_supported_languages(COMPILED_LANGUAGES COMPILED)
  foreach(ilanguage IN LISTS COMPILED_LANGUAGES)
    language2compilerenv(${ilanguage} ienv)
    message(${ARGS_LOG_LEVEL} "${ARGS_PREFIX}${ienv} = $ENV{${ienv}}")
  endforeach()
endfunction()

function(show_implicit_libraries)
  set(oneValueArgs PREFIX LOG_LEVEL)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LOG_LEVEL)
    set(ARGS_LOG_LEVEL DEBUG)
  endif()
  get_supported_languages(COMPILED_LANGUAGES COMPILED)
  foreach(ilanguage IN LISTS COMPILED_LANGUAGES)
    message(${ARGS_LOG_LEVEL} "${ARGS_PREFIX}CMAKE_${ilanguage}_IMPLICIT_LINK_LIBRARIES = ${CMAKE_${ilanguage}_IMPLICIT_LINK_LIBRARIES}")
  endforeach()
endfunction()

function(show_compilers)
  set(oneValueArgs PREFIX LOG_LEVEL)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_LOG_LEVEL)
    set(ARGS_LOG_LEVEL DEBUG)
  endif()
  get_supported_languages(COMPILED_LANGUAGES COMPILED)
  foreach(ilanguage IN LISTS COMPILED_LANGUAGES)
    message(${ARGS_LOG_LEVEL} "${ARGS_PREFIX}CMAKE_${ilanguage}_COMPILER = ${CMAKE_${ilanguage}_COMPILER}")
  endforeach()
endfunction()

function(sort_files_by_language prefix)
  set(oneValueArgs OUTPUT_LANGUAGES)
  set(multiValueArgs SOURCES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_SOURCES)
    set(ARGS_SOURCES ${ARGS_UNPARSED_ARGUMENTS})
  endif()
  get_supported_languages(LANGUAGES)
  foreach(ilanguage IN LISTS LANGUAGES)
    set(${prefix}_${ilanguage})
  endforeach()
  foreach(ifile IN LISTS ARGS_SOURCES)
    set(ilanguage)
    file2language(${ifile} ilanguage)
    list(APPEND ${prefix}_${ilanguage} ${ifile})
  endforeach()
  set(source_languages)
  foreach(ilanguage IN LISTS LANGUAGES)
    set(${prefix}_${ilanguage} ${${prefix}_${ilanguage}} PARENT_SCOPE)
    if(${prefix}_${ilanguage})
      list(APPEND source_languages ${ilanguage})
    endif()
  endforeach()
  if(ARGS_OUTPUT_LANGUAGES)
    set(${ARGS_OUTPUT_LANGUAGES} ${source_languages} PARENT_SCOPE)
  endif()
endfunction()

function(select_files_by_language language destination)
  get_supported_languages(LANGUAGES)
  set(oneValueArgs OTHER_DESTINATION)
  set(multiValueArgs SOURCES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_SOURCES)
    set(ARGS_SOURCES ${ARGS_UNPARSED_ARGUMENTS})
  endif()
  sort_files_by_language(SRC SOURCES ${ARGS_SOURCES})
  set(sources)
  set(other_sources)
  foreach(ilanguage IN LISTS LANGUAGES)
    if(ilanguage STREQUAL "${language}")
      list(APPEND sources ${SRC_${ilanguage}})
    else()
      list(APPEND other_sources ${SRC_${ilanguage}})
    endif()
  endforeach()
  set(${destination} ${sources} PARENT_SCOPE)
  if(ARGS_OTHER_DESTINATION)
    set(${ARGS_OTHER_DESTINATION} ${other_sources} PARENT_SCOPE)
  endif()
endfunction()

function(inspect_target name)
  set(oneValueArgs LOG_LEVEL)
  set(multiValueArgs PROPERTIES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT TARGET ${name})
    message(FATAL_ERROR "\"${name}\" is not a target")
  endif()
  set_default(ARGS_LOG_LEVEL STATUS)
  if(NOT ARGS_PROPERTIES)
    list(
      APPEND ARGS_PROPERTIES TYPE IMPORTED
      ${CMAKE_PROPERTY_LIST}
    )
    list(REMOVE_DUPLICATES ARGS_PROPERTIES)
  endif()
  message(${ARGS_LOG_LEVEL} "Inspecting target \"${name}\"")
  foreach(property IN LISTS ARGS_PROPERTIES)
    string(REPLACE "<CONFIG>" "${CMAKE_BUILD_TYPE}" property ${property})
    # if(property STREQUAL "LOCATION" OR property MATCHES "^LOCATION_" OR property MATCHES "_LOCATION$")
    #   continue()
    # endif()
    get_property(was_set TARGET ${name} PROPERTY ${property} SET)
    if(was_set)
      get_target_property(value ${name} ${property})
      message(${ARGS_LOG_LEVEL} "    ${property} = ${value}")
    endif()
  endforeach()
endfunction()
