function(extension2language EXT VAR)
  if(EXT STREQUAL ".c")
    set(${VAR} C PARENT_SCOPE)
  elseif(EXT STREQUAL ".cpp")
    set(${VAR} CXX PARENT_SCOPE)
  elseif(EXT STREQUAL ".jl")
    set(${VAR} Julia PARENT_SCOPE)
  elseif(EXT STREQUAL ".py")
    set(${VAR} Python PARENT_SCOPE)
  elseif(EXT STREQUAL ".R")
    set(${VAR} R PARENT_SCOPE)
  elseif(EXT STREQUAL ".m")
    set(${VAR} Matlab PARENT_SCOPE)
  else()
    string(REGEX MATCH "[.][fF]((90)|(95)|(03)|(08)|(18))?$" match ${EXT})
    if(match)
      set(${VAR} Fortran PARENT_SCOPE)
    else()
      message(ERROR "Support for extension \"${EXT}\" not implemented")
    endif()
  endif()
endfunction()

function(language2srcext language VAR)
  if(language STREQUAL C)
    set(${VAR} ".c" PARENT_SCOPE)
  elseif(language STREQUAL CXX)
    set(${VAR} ".cpp" PARENT_SCOPE)
  elseif(language STREQUAL Fortran)
    set(${VAR} ".F90" PARENT_SCOPE)
  elseif(language STREQUAL Julia)
    set(${VAR} ".jl" PARENT_SCOPE)
  elseif(language STREQUAL Python)
    set(${VAR} ".py" PARENT_SCOPE)
  elseif(language STREQUAL R)
    set(${VAR} ".R" PARENT_SCOPE)
  elseif(language STREQUAL Matlab)
    set(${VAR} ".m" PARENT_SCOPE)
  else()
    message(ERROR "Support for language \"${language}\" not implemented")
  endif()
endfunction()

function(file2language TARGET VAR)
  cmake_path(GET TARGET EXTENSION TARGET_EXT)
  extension2language(${TARGET_EXT} ${VAR})
  message(STATUS "${TARGET}, ${VAR}, ${TARGET_EXT}, ${${VAR}}")
  set(${VAR} ${${VAR}} PARENT_SCOPE)
endfunction()

function(get_supported_languages VAR)
  set(option COMPILED)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(ARGS_COMPILED)
    set(${VAR} C CXX Fortran)
  else()
    set(${VAR} C CXX Fortran Julia Python R Matlab)
  endif()
  set(${VAR} ${${VAR}} PARENT_SCOPE)
endfunction()

function(sort_files_by_language prefix)
  set(oneValueArgs OUTPUT_LANGUAGES)
  set(multiValueArgs SOURCES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_SOURCES)
    set(ARGS_SOURCES ${ARGS_UNPARSED_ARGUMENTS})
  endif()
  get_supported_languages(LANGUAGES)
  foreach(ilanguage IN LISTS LANGUAGES)
    set(${prefix}_${ilanguage})
  endforeach()
  foreach(ifile IN LISTS ARGS_SOURCES)
    set(ilanguage)
    file2language(${ifile} ilanguage)
    list(APPEND ${prefix}_${ilanguage} ${ifile})
  endforeach()
  set(source_languages)
  foreach(ilanguage IN LISTS LANGUAGES)
    set(${prefix}_${ilanguage} ${${prefix}_${ilanguage}} PARENT_SCOPE)
    if(${prefix}_${ilanguage})
      list(APPEND source_languages ${ilanguage})
    endif()
  endforeach()
  if(ARGS_OUTPUT_LANGUAGES)
    set(${ARGS_OUTPUT_LANGUAGES} ${source_languages} PARENT_SCOPE)
  endif()
endfunction()

function(select_files_by_language language destination)
  get_supported_languages(LANGUAGES)
  set(oneValueArgs OTHER_DESTINATION)
  set(multiValueArgs SOURCES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT ARGS_SOURCES)
    set(ARGS_SOURCES ${ARGS_UNPARSED_ARGUMENTS})
  endif()
  sort_files_by_language(SRC SOURCES ${ARGS_SOURCES})
  set(sources)
  set(other_sources)
  foreach(ilanguage IN LISTS LANGUAGES)
    if(ilanguage STREQUAL "${language}")
      list(APPEND sources ${SRC_${ilanguage}})
    else()
      list(APPEND other_sources ${SRC_${ilanguage}})
    endif()
  endforeach()
  set(${destination} ${sources} PARENT_SCOPE)
  if(ARGS_OTHER_DESTINATION)
    set(${ARGS_OTHER_DESTINATION} ${other_sources} PARENT_SCOPE)
  endif()
endfunction()
