cmake_minimum_required(VERSION 3.16)
project(SpeedTest)
set(CMAKE_VERBOSE_MAKEFILE ON)

option(ENABLE_CXX "Turn on CXX speed test" ON)
option(ENABLE_C "Turn on C speed test" ON)
option(ENABLE_Fortran "Turn on Fortran speed test" ON)
option(ENABLE_Python "Turn on Python speed test" ON)
option(N_MSG "Number of messages that should be sent" 100)
option(S_MSG "Size of messages that should be sent" 100)
option(COMM "Communicator type that should be used" DEFAULT_COMM)
set(SPEED_TEST_N_MSG ${N_MSG})
set(SPEED_TEST_S_MSG ${S_MSG})
set(SPEED_TEST_COMM ${COMM})
list(APPEND CMAKE_COMMAND_ARGS_TO_COPY YggInterface_DIR CMAKE_PREFIX_PATH Python3_ROOT_DIR CMAKE_VERBOSE_MAKEFILE)

function(add_speed_test LANGUAGE LANGUAGE_EXT)
  if (NOT ENABLE_${LANGUAGE})
    return()
  endif()
  find_package(YggInterface REQUIRED)
  include(YggAddFortranSubdirectory)
  check_language_external(${LANGUAGE} REQUIRED OUTPUT_VARIABLE external
                          GENERATOR generator EXTERNAL_PATHS paths)
  if (external)
    list(APPEND CMAKE_COMMAND_ARGS -DCMAKE_${LANGUAGE}_COMPILER:PATH=${CMAKE_${LANGUAGE}_COMPILER})
    if (generator)
      list(APPEND CMAKE_COMMAND_ARGS "-G${generator}")
    endif()
  endif()
  foreach(opt IN LISTS CMAKE_COMMAND_ARGS_TO_COPY)
    if (${opt})
      list(LENGTH ${opt} opt_len)
      if (opt_len GREATER 1)
        list(JOIN ${opt} "\\\\;" tmp)
        list(APPEND CMAKE_COMMAND_ARGS -D${opt}=${tmp})
      else()
        list(APPEND CMAKE_COMMAND_ARGS -D${opt}=${${opt}})
      endif()
    endif()
  endforeach()
  configure_file(CMakeLists.txt.in ${LANGUAGE}/CMakeLists.txt @ONLY)
  configure_file(${LANGUAGE}/speedtest.${LANGUAGE_EXT}.in
                 ${LANGUAGE}/speedtest.${LANGUAGE_EXT} @ONLY)
  set(lang_src_dir ${CMAKE_CURRENT_BINARY_DIR}/${LANGUAGE})
  set(lang_bld_dir ${CMAKE_CURRENT_BINARY_DIR}/${LANGUAGE}_build)
  file(MAKE_DIRECTORY ${lang_bld_dir})
  if (paths)
    set(old_paths $ENV{PATH})
    set(ENV{PATH} "${paths}\\;$ENV{PATH}")
  endif()
  message(STATUS "CMAKE_COMMAND_ARGS = ${CMAKE_COMMAND_ARGS}")
  execute_process(
    COMMAND ${CMAKE_COMMAND} ${lang_src_dir} ${CMAKE_COMMAND_ARGS}
    WORKING_DIRECTORY ${lang_bld_dir}
    COMMAND_ECHO STDOUT
    RESULT_VARIABLE ret)
  if (NOT ret EQUAL 0)
    message(FATAL_ERROR "Failed to configure ${LANGUAGE} speedtest")
  endif()
  execute_process(
    COMMAND ${CMAKE_COMMAND} --build . --config Release
    WORKING_DIRECTORY ${lang_bld_dir}
    COMMAND_ECHO STDOUT
    RESULT_VARIABLE ret)
  if (paths)
    set(ENV{PATH} "${old_paths}")
  endif()
  if (NOT ret EQUAL 0)
    message(FATAL_ERROR "Failed to build ${LANGUAGE} speedtest")
  endif()
  add_test(NAME speedtest_${LANGUAGE}
           COMMAND ${LANGUAGE}_build/speedtest_${LANGUAGE})
  if(WIN32 AND Python3_RUNTIME_LIBRARY_DIRS)
    list(APPEND TEST_ENV "PYTHONHOME=${Python3_RUNTIME_LIBRARY_DIRS}")
  else()
    list(APPEND TEST_ENV "FAKE_ENV=test")
  endif()
  if(WIN32)
    set(pathsep "\\;")
    set(suffix "bin")
    set(envvar "PATH")
  else()
    set(pathsep ":")
    set(suffix "lib")
    set(envvar "LD_LIBRARY_PATH")
  endif()
  set(NEW_PATHS $ENV{${envvar}})
  foreach(d IN LISTS CMAKE_PREFIX_PATH)
    cmake_path(APPEND d ${suffix})
    list(APPEND NEW_PATHS ${d})
  endforeach()
  if (WIN32 AND Python3_ROOT_DIR)
    message(STATUS "Python3_ROOT_DIR = ${Python3_ROOT_DIR}")
    list(APPEND NEW_PATHS ${Python3_ROOT_DIR})
  endif()
  if (NEW_PATHS)
    list(JOIN NEW_PATHS "${pathsep}" NEW_PATH_ENV)
    list(APPEND TEST_ENV "${envvar}=${NEW_PATH_ENV}")
  endif()
  message(STATUS "TEST_ENV = ${TEST_ENV}")
  set_tests_properties(speedtest_${LANGUAGE} PROPERTIES
                       ENVIRONMENT "${TEST_ENV}")
endfunction()

enable_testing()
add_speed_test(C c)
add_speed_test(CXX cpp)
add_speed_test(Fortran f90)
if (ENABLE_Python)
  find_package(YggInterface REQUIRED)
  include(SearchTools)
  find_package_python()
  message(STATUS "Python3_EXECUTABLE = ${Python3_EXECUTABLE}")
  configure_file(Python/speedtest.py.in Python/speedtest.py @ONLY)
  add_test(NAME speedtest_Python COMMAND ${Python3_EXECUTABLE} Python/speedtest.py)
endif()
