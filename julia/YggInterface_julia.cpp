
// LINES AFTER THIS WERE GENERATED AND SHOULD NOT BE MODIFIED DIRECTLY
//====================================================================
#include "jlcxx/jlcxx.hpp"
#include "communicators/WrapComm.hpp"
JLCXX_MODULE define_communicator_module(jlcxx::Module& mod)
{
  using namespace YggInterface::communicator;
    mod.add_type<WrapComm>("YggComm")
      .method<int, WrapComm>("send_eof", &WrapComm::send_eof)
      .method<int, WrapComm, const char*, const size_t&>("send_raw", &WrapComm::send_raw)
      .method<int, WrapComm, const rapidjson::Document&, bool>("send", &WrapComm::send)
      .method<void, WrapComm, int64_t>("set_timeout_recv", &WrapComm::set_timeout_recv)
      .method<int64_t, WrapComm>("get_timeout_recv", &WrapComm::get_timeout_recv)
      .method<int, WrapComm, const int64_t&>("wait_for_recv", &WrapComm::wait_for_recv)
      .method<long, WrapComm, rapidjson::Document&, bool>("recv", &WrapComm::recv)
      .method<long, WrapComm, const rapidjson::Document&, rapidjson::Document&>("call", &WrapComm::call)
      .method<int, WrapComm, DIRECTION>("nmsg", &WrapComm::nmsg)
      .method<void, WrapComm>("open", &WrapComm::open)
      .method<void, WrapComm>("close", &WrapComm::close)
      .method<bool, WrapComm>("is_closed", &WrapComm::is_closed)
      .method<bool, WrapComm>("is_open", &WrapComm::is_open)
      .method<COMM_TYPE, WrapComm>("getType", &WrapComm::getType)
      .method<void, WrapComm, COMM_TYPE>("setType", &WrapComm::setType)
      .method<bool, WrapComm>("valid", &WrapComm::valid)
      .method<bool, WrapComm>("global", &WrapComm::global)
      .method<bool, WrapComm>("async", &WrapComm::async)
      .method<YggInterface::utils::Metadata&, WrapComm, const DIRECTION>("getMetadata", &WrapComm::getMetadata)
      .method<const YggInterface::utils::Metadata&, WrapComm, const DIRECTION>("getMetadata", &WrapComm::getMetadata)
      .method<FLAG_TYPE&, WrapComm>("getFlags", &WrapComm::getFlags)
      .method<FLAG_TYPE, WrapComm>("getFlags", &WrapComm::getFlags)
      .method<const std::string&, WrapComm>("getName", &WrapComm::getName)
      .method<std::string, WrapComm>("logClass", &WrapComm::logClass)
      .method<std::string, WrapComm>("logInst", &WrapComm::logInst)
      .method<std::string, WrapComm>("getAddress", &WrapComm::getAddress)
      .method<DIRECTION, WrapComm>("getDirection", &WrapComm::getDirection)
      .method<COMM_TYPE, WrapComm>("getCommType", &WrapComm::getCommType)
      .method<LANGUAGE, WrapComm>("getLanguage", &WrapComm::getLanguage)
      .method<bool, WrapComm, LANGUAGE>("setLanguage", &WrapComm::setLanguage)
      .method<size_t, WrapComm>("getMaxMsgSize", &WrapComm::getMaxMsgSize)
      .method<size_t, WrapComm>("getMsgBufSize", &WrapComm::getMsgBufSize)
      .method<static bool, WrapComm>("isInstalled", &WrapComm::isInstalled)
      .method<WorkerList&, WrapComm>("getWorkers", &WrapComm::getWorkers)
      .method<bool, WrapComm, bool>("PyGIL_release", &WrapComm::PyGIL_release)
      .method<bool, WrapComm, bool>("PyGIL_restore", &WrapComm::PyGIL_restore)
      .method<bool, WrapComm, const utils::Metadata&, const DIRECTION>("addSchema", &WrapComm::addSchema)
      .method<bool, WrapComm, const rapidjson::Value&, bool, const DIRECTION>("addSchema", &WrapComm::addSchema)
      .method<bool, WrapComm, const std::string&, bool, const DIRECTION>("addSchema", &WrapComm::addSchema)
      .method<bool, WrapComm, const Comm_t*, const DIRECTION>("copySchema", &WrapComm::copySchema)
      .method<std::string, WrapComm>("getOppAddress", &WrapComm::getOppAddress)
      .method<COMM_TYPE, WrapComm>("getOppCommType", &WrapComm::getOppCommType)
      .method<void, WrapComm>("setOppEnv", &WrapComm::setOppEnv)
      .method<void, WrapComm>("unsetOppEnv", &WrapComm::unsetOppEnv)
      .method<bool, WrapComm, Comm_t*, Comm_t*>("afterSendRecv", &WrapComm::afterSendRecv)
      .method<bool, WrapComm, std::string&>("genMetadata", &WrapComm::genMetadata)
      .method<Comm_t*, WrapComm>("getGlobalComm", &WrapComm::getGlobalComm);
}