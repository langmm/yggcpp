{% set name = "YggInterface" %}
{% set version = "1.10.2" %}
{% set PY_VER_MAJOR = PY_VER.split('.')[0] %}
{% set PY_VER_MINOR = PY_VER.split('.')[1] %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  path: ../

build:
  number: 0
  string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  run_exports:
    - {{ pin_subpackage('ygginterface', max_pin='x.x.x') }}
  script: 'CMAKE_GENERATOR="Ninja" {{ PYTHON }} -m pip install . --no-deps --ignore-installed -vvv --no-build-isolation'  # [unix]
  script: 'set "SKBUILD_CMAKE_ARGS=-G Ninja" && {{ PYTHON }} -m pip install . --no-deps --ignore-installed -vvv --no-build-isolation'  # [win]
  skip: true  # [(win and vc<14) or py<35]

requirements:
  build:
    - cmake >=3.16
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - hatch-fancy-pypi-readme
    - ninja
    - numpy >=1.13.0
    - python                                 # [build_platform != target_platform]
    - scikit-build-core
    - setuptools_scm
    - {{ compiler('c') }}                    # [not win]
    - {{ compiler('cxx') }}                  # [not win]
    - {{ compiler('fortran') }}              # [not win]
    - m2w64-gcc-fortran                      # [win]
  host:
    - hatch-fancy-pypi-readme
    - llvm-openmp
    - numpy >=1.13.0
    - openmpi
    - pip
    - python
    - scikit-build-core
    - setuptools_scm
    - sysv_ipc  # [not win]
    - zeromq
  run:
    - llvm-openmp
    - numpy >=1.13.0
    - openmpi
    - python
    - pyzmq
    - sysv_ipc  # [not win]

test:
  imports:
    - ygginterface
    
    # about:
    #   summay: Yggdrasil interface for Python
    #   description:
    #   license: BSD-3-Clause
    #   license_family: BSD
    #   license_file: LICENSE.txt

  # - name: ygginterface-cxx
  #   build:
  #     string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  #     run_exports:
  #       - {{ pin_subpackage('ygginterface-cxx', max_pin='x.x.x') }}
  #     skip: true  # [(win and vc<14) or py<35]
  #   requirements:
  #     build:
  #       - cmake >=3.16
  #       - cross-python_{{ target_platform }}     # [build_platform != target_platform]
  #       - numpy >=1.13.0
  #       - python                                 # [build_platform != target_platform]
  #       - {{ stdlib('c') }}
  #       - {{ compiler('c') }}
  #       - {{ compiler('cxx') }}
  #       - {{ compiler('fortran') }}              # [not win]
  #       - m2w64-gcc-fortran                      # [win]
  #     host:
  #       - llvm-openmp
  #       - numpy >=1.13.0
  #       - openmpi
  #       - python
  #       - sysv_ipc  # [not win]
  #       - zeromq
  #     run:
  #       - numpy >=1.13.0
  #       - python
  #   test:
  #     commands:
  #     - test -f $PREFIX/lib/cmake/YggInterface/YggInterfaceConfig.cmake  # [unix]
  #     - test -f $PREFIX/lib/cmake/YggInterface/YggInterfaceConfigVersion.cmake  # [unix]
  #     - test -f $PREFIX/include/YggInterface/YggInterface.hpp  # [unix]
  #     - test -f $PREFIX/include/YggInterface/rapidjson/include/rapidjson/rapidjson.h  # [unix]
  #     - test -f $PREFIX/lib/libYggInterface.dylib  # [osx]
  #     - test -f $PREFIX/lib/libYggInterface.so     # [linux]
  #     - if not exist %LIBRARY_PREFIX%\\cmake\\YggInterfaceConfig.cmake exit 1  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\cmake\\YggInterfaceConfigVersion.cmake exit 1  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\include\\YggInterface\\YggInterface.hpp  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\include\\YggInterface\\rapidjson\\include\\rapidjson\\rapidjson.h exit 1  # [win]
  #     - if not exist %LIBRARY_BIN%\\YggInterface.dll exit 1  # [win]
  #   about:
  #     summay: Yggdrasil interface for C/C++
  #     description:
  #     license: BSD-3-Clause
  #     license_family: BSD
  #     license_file: LICENSE.txt

  # - name: ygginterface-fortran
  #   build:
  #     string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  #     run_exports:
  #       - {{ pin_subpackage('ygginterface-fortran', max_pin='x.x.x') }}
  #     skip: true  # [(win and vc<14) or py<35]
  #   requirements:
  #     build:
  #       - cmake >=3.16
  #       - cross-python_{{ target_platform }}     # [build_platform != target_platform]
  #       - numpy >=1.13.0
  #       - python                                 # [build_platform != target_platform]
  #       - {{ stdlib('c') }}
  #       - {{ compiler('c') }}
  #       - {{ compiler('cxx') }}
  #     host:
  #       - llvm-openmp
  #       - numpy >=1.13.0
  #       - openmpi
  #       - python
  #       - sysv_ipc  # [not win]
  #       - zeromq
  #     run:
  #       - numpy >=1.13.0
  #       - python
  #   test:
  #     commands:
  #     - test -f $PREFIX/lib/cmake/YggInterface/YggInterfaceConfig.cmake  # [unix]
  #     - test -f $PREFIX/lib/cmake/YggInterface/YggInterfaceConfigVersion.cmake  # [unix]
  #     - test -f $PREFIX/include/YggInterface/YggInterface.hpp  # [unix]
  #     - test -f $PREFIX/include/YggInterface/rapidjson/include/rapidjson/rapidjson.h  # [unix]
  #     - test -f $PREFIX/lib/libYggInterface.dylib  # [osx]
  #     - test -f $PREFIX/lib/libYggInterface.so     # [linux]
  #     - if not exist %LIBRARY_PREFIX%\\cmake\\YggInterfaceConfig.cmake exit 1  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\cmake\\YggInterfaceConfigVersion.cmake exit 1  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\include\\YggInterface\\YggInterface.hpp  # [win]
  #     - if not exist %LIBRARY_PREFIX%\\include\\YggInterface\\rapidjson\\include\\rapidjson\\rapidjson.h exit 1  # [win]
  #     - if not exist %LIBRARY_BIN%\\YggInterface.dll exit 1  # [win]
  #   about:
  #     summay: Yggdrasil interface for Fortran
  #     description:
  #     license: BSD-3-Clause
  #     license_family: BSD
  #     license_file: LICENSE.txt

about:
  home: https://github.com/cropsinsilico/yggdrasil
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: A framework for connecting computational models from multiple languages.

  description: |
    The Crops in Silico (CiS) framework, yggdrasil, provides support for
    connecting scientific models written in different programming languages.
    To connect two models, modelers add communications interfaces to the model code
    and provide declarative specification files that identfy the
    models that should be run and the inputs and outputs those models
    expect. yggdrasil uses this information to launch the models
    on parallel processes and orchestrate asynchronous communication between them.
    Although designed for connecting crop models, yggdrasil can be used to
    connect scientific models from any domain.
  doc_url: https://cropsinsilico.github.io/yggdrasil
  dev_url: https://github.com/cropsinsilico/yggdrasil

extra:
  recipe-maintainers:
    - langmm
